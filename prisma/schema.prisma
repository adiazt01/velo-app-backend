// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Representa a un usuario registrado en la plataforma.
// Ejemplo: Un usuario con email "ana@ejemplo.com" crea un proyecto y es asignada a una tarjeta como responsable.
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String

  role UserRole @default(USER)
  projects Project[]
  ProjectMember ProjectMember[]
  comments Comment[]
  notifications Notification[]
  CardAssignee CardAssignee[]
  Attachment Attachment[]
  ActivityLog ActivityLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

// Espacio de trabajo colaborativo. Agrupa tableros, miembros, tareas y actividad.
// Ejemplo: Proyecto "Lanzamiento App Móvil" con varios miembros y tableros.
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])

  comments    Comment[]
  notifications Notification[]
  members ProjectMember[]
  boards Board[]
  activity ActivityLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Relaciona usuarios con proyectos y define su rol (OWNER, MEMBER).
// Ejemplo: Ana es OWNER del proyecto, Juan es MEMBER.
model ProjectMember {
  id       String   @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)

  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tablero Kanban dentro de un proyecto, donde se organizan listas y tarjetas.
// Ejemplo: Tablero "Sprint 1" con listas "Por hacer", "En progreso", "Hecho".
model Board {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String?

  project     Project @relation(fields: [projectId], references: [id])
  lists       List[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Columna dentro de un tablero, agrupa tarjetas según su estado o categoría.
// Ejemplo: Lista "En progreso" contiene tareas activas.
model List {
  id          String   @id @default(cuid())
  boardId     String
  name        String
  description String?

  board       Board   @relation(fields: [boardId], references: [id])
  cards       Card[]

  order       Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tarjeta o tarea individual. Puede tener asignados, comentarios, adjuntos, etiquetas, etc.
// Ejemplo: Tarjeta "Diseñar login" asignada a Ana, con fecha de vencimiento y comentarios.
model Card {
  id          String   @id @default(cuid())
  title       String
  description String?

  listId      String
  list        List    @relation(fields: [listId], references: [id])
  assignees CardAssignee[]
  comments   Comment[]
  attachments Attachment[]
  tags        CardTag[]
  activity   ActivityLog[]

  order      Int      @default(0)

  dueDate     DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Notification Notification[]
}

// Relaciona usuarios con tarjetas, indicando responsables de cada tarea.
// Ejemplo: Ana y Juan están asignados a la tarjeta "Diseñar login".
model CardAssignee {
  id       String   @id @default(cuid())
  cardId   String
  userId   String

  card     Card    @relation(fields: [cardId], references: [id])
  user     User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Comentario hecho por un usuario en una tarjeta o proyecto.
// Ejemplo: Ana comenta en la tarjeta "Diseñar login": "¿Quién se encarga del backend?"
model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  projectId String?
  cardId    String?

  user      User     @relation(fields: [userId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])
  card      Card?    @relation(fields: [cardId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Archivo adjunto a una tarjeta, como imágenes, documentos, etc.
// Ejemplo: Ana sube "mockup-login.png" a la tarjeta "Diseñar login".
model Attachment {
  id        String   @id @default(cuid())
  url       String
  filename String

  cardId    String
  card      Card     @relation(fields: [cardId], references: [id])

  uploadedById String
  uploadedBy User     @relation(fields: [uploadedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

// Etiqueta de color para clasificar tarjetas (por prioridad, tipo, etc.).
// Ejemplo: Etiqueta "Urgente" (rojo) asignada a la tarjeta "Diseñar login".
model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String

  cards     CardTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Relaciona etiquetas con tarjetas.
// Ejemplo: La tarjeta "Diseñar login" tiene las etiquetas "Urgente" y "UI".
model CardTag {
  id        String   @id @default(cuid())
  cardId    String
  tagId     String

  card      Card     @relation(fields: [cardId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Notificación para un usuario sobre eventos relevantes (asignación, comentario, etc.).
// Ejemplo: Ana recibe una notificación: "Te han asignado la tarjeta 'Diseñar login'".
model Notification {
  id        String   @id @default(cuid())
  type      NotificationType @default(GENERIC)

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  cardId    String?
  card      Card?    @relation(fields: [cardId], references: [id])

  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Registro de acciones importantes (creación de tarjeta, cambio de estado, etc.).
// Ejemplo: Se registra: "Ana movió la tarjeta 'Diseñar login' a 'En progreso'".
model ActivityLog {
  id        String   @id @default(cuid())
  description String

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  cardId    String?
  card      Card?    @relation(fields: [cardId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
}

enum ProjectRole {
  OWNER
  MEMBER
}

enum NotificationType {
  GENERIC
  COMMENT
  ASSIGNMENT
  MENTION
  CARD_UPDATE
}